Basic JavaScript
Npm
React = 3
React-JWT(Login Logut)-1
Mock API
json-server
React_hooks -1
Depolyment
-> Heroku
-> MERN
-> Docker
Github
React-GarphQL 1
//////////////
React-Redux =2
Testing
React-Saga -1
Basic React Native=1

-> Nginx

--------NOT--------------
API
GarphQL
Login/Logout

react> main lib
react-dom> help to render in html
react-script> help to compile the app

//////
Component
////////

functional
> light in weight
> dumb Component
> Use for display purpose
> They can not manage state
> we cannot call api in functional component

ClassBase
> heavy as compare to functional
> logical component
> use for display/api/state management


state & props

state                state
componentA    =====> componentB
             props

state is a local variable
props help to transfer data in nested component

function add(a,b){
    var add = a+b
}


add(1,2)

parent  > child (props)
child >parent(function)

function add(a,b){
    return a+b
}

add(10)

npm i react-router-dom


///////////////////////////
(get) hotels> https://developerfunnel.herokuapp.com/hotels
(get) hotelwrtcity > https://developerfunnel.herokuapp.com/hotels?city=6
(get) hoteldetails > https://developerfunnel.herokuapp.com/hotelsdetails/1
(get) onbasisoftrip> https://developerfunnel.herokuapp.com/hotellist/1
https://developerfunnel.herokuapp.com/hotellist/1?roomtype=1
https://developerfunnel.herokuapp.com/hotellist/1?hcost=1000&lcost=500
(get) cityname> https://developerfunnel.herokuapp.com/location
(get)  rooms => https://developerfunnel.herokuapp.com/rooms
(get)  triptype> https://developerfunnel.herokuapp.com/booking
(get)  bookingdetails > https://developerfunnel.herokuapp.com/allBooking
(post) placebooking >  https://developerfunnel.herokuapp.com/placeBook


http://developerhotel.herokuapp.com



function add(a,b){
    return a.test+b.test
}

add({"test":1},{"test":2})

[1,2,3,4,5]

[1,2]
[3,4]
[5]

https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/

//////////////
/******GetAllUser*****/
(GET)> http://localhost:5000/api/auth/users

/******Register*****/
(POST)> http://localhost:5000/api/auth/register
(body) => {"name":"Aakash", "email":"aa@gmail.com","password":"12345678","role":"user?"}


/******Login*****/
(POST) => http://localhost:5000/api/auth/login
(body)  => {"email":"aa@gmail.com","password":"12345678"}
(response)=> {auth:true,token:'dgsdg'}

/******UserInfo*****/
(GET) => http://localhost:5000/api/auth/userinfo
(Header) => {'x-access-token':'token value from login'}
(response) => {userinfo}
JWT


npm run build

//Mount
> constructor
> getDerivedStateFromProps()
> componentWillMount()
> render
> componentDidMount()

//Update
> getDerivedStateFromProps()
> shouldComponentUpdtate()
> componentWillUpdate()
> render
> componentDidUpdate

//unmount
> componentWillUnmount

////
Mock API
/////
#windows
> run cmd as admin
> npm i -g json-server
json-server --watch db.json --port 8700

#mac/linux
sudo npm i -g json-server
json-server --watch db.json --port 8700


state
api call
lifecycle method

https://git-scm.com/downloads
/////
First Time from new folder
//////

git init
git add .
git commit -m "first commit"
git remote add origin https://github.com/Aakashdeveloper/ynottest.git
git push -u origin master

/////
second and all Time
//////
git add .
git commit -m "first commit"
git push

git checkout -b myfeature

git add .
git commit -m "first commit"
git push -u origin myfeature

https://www.youtube.com/c/DeveloperFunnel/videos?view_as=subscriber

//gql///
{
  product(id:4){
    name,
    rating_text
  }
}

npm i apollo-garphql apollo-boost graphql react-apollo graphql-tag


docker build . -t mysep10
docker run -p 9090:3000 mysep10


///////////
Framework for react
////////
Maintain state
Structure of app
passing data in non nested component 
npm i redux react-redux redux-logger

store
action
reducer
view

npm i prop-types redux react-redux react-router-dom react-slick redux-logger redux-promise enzyme enzyme-adapter-react-16 react-addons-test-utils react-test-renderer